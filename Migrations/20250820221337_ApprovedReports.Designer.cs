// <auto-generated />
using System;
using DisasterResourceFinder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DisasterResourceFinder.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250820221337_ApprovedReports")]
    partial class ApprovedReports
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DisasterResourceFinder.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CurrentOccupancy")
                        .HasColumnType("int");

                    b.Property<bool>("IsPetFriendly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWheelchairAccessible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "100 Main St",
                            Capacity = 200,
                            City = "Toronto",
                            CurrentOccupancy = 120,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9257),
                            Latitude = 43.653199999999998,
                            Longitude = -79.383200000000002,
                            Name = "City Hall Shelter",
                            OpeningHours = "24/7",
                            Phone = "416-555-1000",
                            PostalCode = "M1A1A1",
                            Type = "Shelter",
                            WebsiteUrl = "http://cityshelter.ca"
                        },
                        new
                        {
                            Id = 2,
                            Address = "50 King St",
                            Capacity = 500,
                            City = "Toronto",
                            CurrentOccupancy = 300,
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9323),
                            Latitude = 43.649999999999999,
                            Longitude = -79.379999999999995,
                            Name = "Downtown Food Bank",
                            OpeningHours = "9 AM – 5 PM",
                            Phone = "416-555-2000",
                            PostalCode = "M1A1B2",
                            Type = "Food",
                            WebsiteUrl = "http://foodbank.ca"
                        },
                        new
                        {
                            Id = 3,
                            Address = "123 Health Ave",
                            Capacity = 1000,
                            City = "Ottawa",
                            CurrentOccupancy = 750,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9325),
                            Latitude = 45.421500000000002,
                            Longitude = -75.697199999999995,
                            Name = "General Hospital",
                            OpeningHours = "24/7",
                            Phone = "613-555-3000",
                            PostalCode = "K1A0B1",
                            Type = "Medical",
                            WebsiteUrl = "http://hospital.ca"
                        },
                        new
                        {
                            Id = 4,
                            Address = "400 Queen St",
                            Capacity = 150,
                            City = "Ottawa",
                            CurrentOccupancy = 80,
                            IsPetFriendly = true,
                            IsWheelchairAccessible = false,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9327),
                            Latitude = 45.423000000000002,
                            Longitude = -75.689999999999998,
                            Name = "Community Center Shelter",
                            OpeningHours = "6 PM – 8 AM",
                            Phone = "613-555-4000",
                            PostalCode = "K1A0C2",
                            Type = "Shelter",
                            WebsiteUrl = "http://communityshelter.ca"
                        },
                        new
                        {
                            Id = 5,
                            Address = "789 Market Rd",
                            Capacity = 300,
                            City = "Vancouver",
                            CurrentOccupancy = 220,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9329),
                            Latitude = 49.282699999999998,
                            Longitude = -123.1207,
                            Name = "West End Food Support",
                            OpeningHours = "10 AM – 6 PM",
                            Phone = "604-555-5000",
                            PostalCode = "V5K0A1",
                            Type = "Food",
                            WebsiteUrl = "http://westendfood.ca"
                        },
                        new
                        {
                            Id = 6,
                            Address = "321 Care Blvd",
                            Capacity = 400,
                            City = "Vancouver",
                            CurrentOccupancy = 350,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9331),
                            Latitude = 49.280000000000001,
                            Longitude = -123.11,
                            Name = "Eastside Medical Clinic",
                            OpeningHours = "8 AM – 10 PM",
                            Phone = "604-555-6000",
                            PostalCode = "V5K0B2",
                            Type = "Medical",
                            WebsiteUrl = "http://eastmedical.ca"
                        },
                        new
                        {
                            Id = 7,
                            Address = "12 Dockside Ln",
                            Capacity = 120,
                            City = "Halifax",
                            CurrentOccupancy = 95,
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9333),
                            Latitude = 44.648800000000001,
                            Longitude = -63.575200000000002,
                            Name = "Harborview Shelter",
                            OpeningHours = "24/7",
                            Phone = "902-555-7000",
                            PostalCode = "B3H0A1",
                            Type = "Shelter",
                            WebsiteUrl = "http://harborshelter.ca"
                        },
                        new
                        {
                            Id = 8,
                            Address = "99 Gottingen St",
                            Capacity = 250,
                            City = "Halifax",
                            CurrentOccupancy = 180,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = false,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9334),
                            Latitude = 44.652000000000001,
                            Longitude = -63.579999999999998,
                            Name = "North End Food Pantry",
                            OpeningHours = "11 AM – 7 PM",
                            Phone = "902-555-8000",
                            PostalCode = "B3K3B5",
                            Type = "Food",
                            WebsiteUrl = "http://northendfood.ca"
                        },
                        new
                        {
                            Id = 9,
                            Address = "77 Healthway",
                            Capacity = 200,
                            City = "Halifax",
                            CurrentOccupancy = 150,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9336),
                            Latitude = 44.650500000000001,
                            Longitude = -63.582099999999997,
                            Name = "St. Mary’s Clinic",
                            OpeningHours = "7 AM – 11 PM",
                            Phone = "902-555-9000",
                            PostalCode = "B3K2R5",
                            Type = "Medical",
                            WebsiteUrl = "http://stmarysclinic.ca"
                        },
                        new
                        {
                            Id = 10,
                            Address = "345 Hope St",
                            Capacity = 180,
                            City = "Montreal",
                            CurrentOccupancy = 140,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9338),
                            Latitude = 45.5017,
                            Longitude = -73.567300000000003,
                            Name = "Downtown Women’s Shelter",
                            OpeningHours = "24/7",
                            Phone = "514-555-1000",
                            PostalCode = "H3A1A1",
                            Type = "Shelter",
                            WebsiteUrl = "http://womenshelter.ca"
                        },
                        new
                        {
                            Id = 11,
                            Address = "222 Park Ave",
                            Capacity = 400,
                            City = "Montreal",
                            CurrentOccupancy = 260,
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9340),
                            Latitude = 45.515000000000001,
                            Longitude = -73.572999999999993,
                            Name = "Plateau Food Collective",
                            OpeningHours = "12 PM – 8 PM",
                            Phone = "514-555-1100",
                            PostalCode = "H2X1Y4",
                            Type = "Food",
                            WebsiteUrl = "http://plateaufood.ca"
                        },
                        new
                        {
                            Id = 12,
                            Address = "456 Care St",
                            Capacity = 350,
                            City = "Montreal",
                            CurrentOccupancy = 280,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9342),
                            Latitude = 45.450000000000003,
                            Longitude = -73.579999999999998,
                            Name = "Verdun Health Center",
                            OpeningHours = "8 AM – 6 PM",
                            Phone = "514-555-1200",
                            PostalCode = "H4G1N3",
                            Type = "Medical",
                            WebsiteUrl = "http://verdunhealth.ca"
                        },
                        new
                        {
                            Id = 13,
                            Address = "101 Wheat Ln",
                            Capacity = 160,
                            City = "Winnipeg",
                            CurrentOccupancy = 130,
                            IsPetFriendly = true,
                            IsWheelchairAccessible = false,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9344),
                            Latitude = 49.895099999999999,
                            Longitude = -97.138400000000004,
                            Name = "Prairie Haven Shelter",
                            OpeningHours = "24/7",
                            Phone = "204-555-1300",
                            PostalCode = "R3C0A1",
                            Type = "Shelter",
                            WebsiteUrl = "http://prairieshelter.ca"
                        },
                        new
                        {
                            Id = 14,
                            Address = "88 Grain St",
                            Capacity = 280,
                            City = "Winnipeg",
                            CurrentOccupancy = 190,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9346),
                            Latitude = 49.890000000000001,
                            Longitude = -97.140000000000001,
                            Name = "West Winnipeg Food Hub",
                            OpeningHours = "9 AM – 3 PM",
                            Phone = "204-555-1400",
                            PostalCode = "R3C0B2",
                            Type = "Food",
                            WebsiteUrl = "http://winnipegfood.ca"
                        },
                        new
                        {
                            Id = 15,
                            Address = "300 River Rd",
                            Capacity = 220,
                            City = "Winnipeg",
                            CurrentOccupancy = 160,
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 20, 22, 13, 36, 920, DateTimeKind.Utc).AddTicks(9348),
                            Latitude = 49.884,
                            Longitude = -97.123999999999995,
                            Name = "St. Boniface Clinic",
                            OpeningHours = "7 AM – 9 PM",
                            Phone = "204-555-1500",
                            PostalCode = "R2H1A7",
                            Type = "Medical",
                            WebsiteUrl = "http://stbonifaceclinic.ca"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d8d4def-ad94-4aed-836a-49d26857bfe4",
                            Email = "admin@demo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DEMO.COM",
                            NormalizedUserName = "ADMIN@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH6ZvqYGErkRdlfvNXOR7DFEkj/QsJByEssGZ/AxeO6FJsDE3trH8QnwSxrca0PDCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f9d2bc2-401f-4cde-afc8-873cca04874a",
                            TwoFactorEnabled = false,
                            UserName = "admin@demo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "100",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ResourceReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("ResourceReports");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResourceReport", b =>
                {
                    b.HasOne("DisasterResourceFinder.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
