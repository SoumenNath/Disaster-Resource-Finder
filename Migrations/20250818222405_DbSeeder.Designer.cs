// <auto-generated />
using System;
using DisasterResourceFinder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DisasterResourceFinder.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250818222405_DbSeeder")]
    partial class DbSeeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DisasterResourceFinder.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsPetFriendly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWheelchairAccessible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 King St W",
                            Capacity = 150,
                            City = "Toronto",
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7922),
                            Latitude = 43.653199999999998,
                            Longitude = -79.383200000000002,
                            Name = "Toronto Central Shelter",
                            OpeningHours = "24/7",
                            Phone = "123-456-7890",
                            PostalCode = "M5H 1A1",
                            Type = "Shelter",
                            WebsiteUrl = "https://torontocentralshelter.example.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Granville St",
                            Capacity = 300,
                            City = "Vancouver",
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7926),
                            Latitude = 49.282699999999998,
                            Longitude = -123.1207,
                            Name = "Vancouver Food Bank",
                            OpeningHours = "Mon–Fri 8 AM – 6 PM",
                            Phone = "987-654-3210",
                            PostalCode = "V6C 1T1",
                            Type = "Food",
                            WebsiteUrl = "https://vancouverfoodbank.example.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 8 Ave SW",
                            Capacity = 80,
                            City = "Calgary",
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7928),
                            Latitude = 51.044699999999999,
                            Longitude = -114.0719,
                            Name = "Calgary Emergency Clinic",
                            OpeningHours = "24/7",
                            Phone = "555-555-5555",
                            PostalCode = "T2P 1H5",
                            Type = "Medical",
                            WebsiteUrl = "https://calgaryemergencyclinic.example.com"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Rue Sainte-Catherine O",
                            Capacity = 200,
                            City = "Montreal",
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7930),
                            Latitude = 45.5017,
                            Longitude = -73.567300000000003,
                            Name = "Montreal Relief Center",
                            OpeningHours = "24/7",
                            Phone = "514-123-4567",
                            PostalCode = "H2X 2Z6",
                            Type = "Shelter",
                            WebsiteUrl = "https://montrealrelief.example.com"
                        },
                        new
                        {
                            Id = 5,
                            Address = "12 Barrington St",
                            Capacity = 120,
                            City = "Halifax",
                            IsPetFriendly = true,
                            IsWheelchairAccessible = false,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7932),
                            Latitude = 44.648800000000001,
                            Longitude = -63.575200000000002,
                            Name = "Halifax Aid Depot",
                            OpeningHours = "Tue–Sat 9 AM – 5 PM",
                            Phone = "902-234-5678",
                            PostalCode = "B3J 1Z1",
                            Type = "Food",
                            WebsiteUrl = "https://halifaxaid.example.com"
                        },
                        new
                        {
                            Id = 6,
                            Address = "33 Elgin St",
                            Capacity = 90,
                            City = "Ottawa",
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7934),
                            Latitude = 45.421500000000002,
                            Longitude = -75.697199999999995,
                            Name = "Ottawa Medical Unit",
                            OpeningHours = "24/7",
                            Phone = "613-789-1234",
                            PostalCode = "K1P 5W1",
                            Type = "Medical",
                            WebsiteUrl = "https://ottawamedical.example.com"
                        },
                        new
                        {
                            Id = 7,
                            Address = "75 Main St",
                            Capacity = 100,
                            City = "Winnipeg",
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7936),
                            Latitude = 49.895099999999999,
                            Longitude = -97.138400000000004,
                            Name = "Winnipeg Crisis Shelter",
                            OpeningHours = "24/7",
                            Phone = "204-876-5432",
                            PostalCode = "R3C 1A3",
                            Type = "Shelter",
                            WebsiteUrl = "https://winnipegshelter.example.com"
                        },
                        new
                        {
                            Id = 8,
                            Address = "300 Douglas St",
                            Capacity = 350,
                            City = "Victoria",
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7938),
                            Latitude = 48.428400000000003,
                            Longitude = -123.3656,
                            Name = "Victoria Community Kitchen",
                            OpeningHours = "Mon–Fri 8 AM – 8 PM",
                            Phone = "250-222-3333",
                            PostalCode = "V8V 2N6",
                            Type = "Food",
                            WebsiteUrl = "https://victoriakitchen.example.com"
                        },
                        new
                        {
                            Id = 9,
                            Address = "500 Broad St",
                            Capacity = 70,
                            City = "Regina",
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7940),
                            Latitude = 50.4452,
                            Longitude = -104.6189,
                            Name = "Regina Health Services",
                            OpeningHours = "24/7",
                            Phone = "306-444-5555",
                            PostalCode = "S4R 1X4",
                            Type = "Medical",
                            WebsiteUrl = "https://reginahealth.example.com"
                        },
                        new
                        {
                            Id = 10,
                            Address = "123 Jasper Ave",
                            Capacity = 130,
                            City = "Edmonton",
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7942),
                            Latitude = 53.546100000000003,
                            Longitude = -113.49379999999999,
                            Name = "Edmonton Support Hub",
                            OpeningHours = "24/7",
                            Phone = "780-111-2222",
                            PostalCode = "T5J 1A1",
                            Type = "Shelter",
                            WebsiteUrl = "https://edmontonshelter.example.com"
                        },
                        new
                        {
                            Id = 11,
                            Address = "45 Rue Saint-Jean",
                            Capacity = 220,
                            City = "Quebec City",
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7943),
                            Latitude = 46.813899999999997,
                            Longitude = -71.208200000000005,
                            Name = "Quebec City Food Assistance",
                            OpeningHours = "Mon–Fri 9 AM – 5 PM",
                            Phone = "418-555-6666",
                            PostalCode = "G1R 1S2",
                            Type = "Food",
                            WebsiteUrl = "https://quebeccityfood.example.com"
                        },
                        new
                        {
                            Id = 12,
                            Address = "10 21st St E",
                            Capacity = 65,
                            City = "Saskatoon",
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(7945),
                            Latitude = 52.133200000000002,
                            Longitude = -106.67,
                            Name = "Saskatoon Urgent Care",
                            OpeningHours = "24/7",
                            Phone = "306-777-8888",
                            PostalCode = "S7K 0A5",
                            Type = "Medical",
                            WebsiteUrl = "https://saskatoonmedical.example.com"
                        },
                        new
                        {
                            Id = 13,
                            Address = "200 Bay St",
                            Capacity = 400,
                            City = "Toronto",
                            IsPetFriendly = true,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(8048),
                            Latitude = 43.655000000000001,
                            Longitude = -79.384,
                            Name = "Toronto Downtown Food Hub",
                            OpeningHours = "Mon–Sat 8 AM – 8 PM",
                            Phone = "123-999-8888",
                            PostalCode = "M5H 3T4",
                            Type = "Food",
                            WebsiteUrl = "https://torontofoodhub.example.com"
                        },
                        new
                        {
                            Id = 14,
                            Address = "777 Granville St",
                            Capacity = 180,
                            City = "Vancouver",
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(8050),
                            Latitude = 49.280000000000001,
                            Longitude = -123.117,
                            Name = "Vancouver Emergency Shelter",
                            OpeningHours = "24/7",
                            Phone = "987-222-3333",
                            PostalCode = "V6Z 1L2",
                            Type = "Shelter",
                            WebsiteUrl = "https://vancouvershelter.example.com"
                        },
                        new
                        {
                            Id = 15,
                            Address = "333 Rue Sherbrooke O",
                            Capacity = 90,
                            City = "Montreal",
                            IsPetFriendly = false,
                            IsWheelchairAccessible = true,
                            LastUpdated = new DateTime(2025, 8, 18, 22, 24, 4, 878, DateTimeKind.Utc).AddTicks(8052),
                            Latitude = 45.503999999999998,
                            Longitude = -73.576999999999998,
                            Name = "Montreal Medical Unit",
                            OpeningHours = "24/7",
                            Phone = "514-777-4444",
                            PostalCode = "H3A 1G5",
                            Type = "Medical",
                            WebsiteUrl = "https://montrealmedical.example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "009d92ff-daab-47e2-89cf-e7f8b35417ed",
                            Email = "admin@demo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DEMO.COM",
                            NormalizedUserName = "ADMIN@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMoVrCuLWQSntHQp6AGx8CrRqie7EU941GQRAHPi+UWfhBWsSrDf3l1679oliYVJ/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "371e5146-05e8-41d0-a35c-fc81fb902580",
                            TwoFactorEnabled = false,
                            UserName = "admin@demo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "100",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
